# -*- mode: ruby -*-
# vi: set ft=ruby :

$VMIMAGE = "generic/ubuntu2004"
$VMMEM = "512"
$VMCPU = "1"

$install = <<-SCRIPT
cat > /home/vagrant/entrypoint.sh << 'EOF'
trap close_all SIGINT
close_all() {
   echo ""
   echo "Exiting vm..."
   exit
}
transmitter() {
  TARGET=$(cat $(ls /vagrant/*.ip | grep -v $(cat /proc/sys/kernel/hostname)) | awk -F'[/=]' '{print $1}')
  echo "Executing ping against $TARGET..."
  ping -c 4 $TARGET
  echo "Done."
  echo "We will now send UDP traffic to the target (open a second terminal, vagrant ssh into netmask2 and follow the instructions)"
  read -p "Press any key to continue once you are ready..."
  TARGET=$(cat $(ls /vagrant/*.ip | grep -v $(cat /proc/sys/kernel/hostname)) | awk -F'[/=]' '{print $1}')
  echo "This is a connection test" | nc -u $TARGET 5204
}
receiver() {
  echo "Opening port 5204, you can now start sendin UDP traffic from netmask1."
  iperf3 -s -p 5204
}
clear
while true
do
echo "You can exit at any time by pressing CTRL+C"
echo "Current IP address is $(ip a s eth1 | awk '/inet / {print $2}' | sed 's/addr://')"
echo "$(ip a s eth1 | awk '/inet / {print $2}' | sed 's/addr://')" > /vagrant/$(cat /proc/sys/kernel/hostname).ip
echo ""
read -p "Please enter the new IP address (press enter to keep current config): " UC_ADDRESS
echo "";
ADDRESS=$(echo ${UC_ADDRESS} | grep -E '(([0-9]{1,3})\.){3}([0-9]{1,3}){1}'  | grep -vE '25[6-9]|2[6-9][0-9]|[3-9][0-9][0-9]')
if [ -n "$ADDRESS" ]
then
  echo "configuring address to $ADDRESS..."
elif [ -z $UC_ADDRESS ]
then
  echo "Keeping address as is..."
else
  echo "IP is not valid, please try again"
  continue
fi
read -p "Please enter the new netmask (press enter to keep current config): " UC_NETMASK
NETMASK=$(echo ${UC_NETMASK} | grep -E '[1-3][0-9]|[8-9]'  | grep -vE '3[3-9]')
if [ -n "$NETMASK" ]
then
  echo "Configuring netmask to ${NETMASK}..."
elif [ -z $UC_NETMASK ]
then
  echo "Keeping netmask as is..."
else
  echo "Netmask is not valid, please try again"
  continue
fi 
sudo ip a del $(ip a s eth1 | awk '/inet / {print $2}' | sed 's/addr://') dev eth1
sudo ip a change dev eth1 $ADDRESS/$NETMASK
echo "$(ip a s eth1 | awk '/inet / {print $2}' | sed 's/addr://')" > /vagrant/$(cat /proc/sys/kernel/hostname).ip
if [ $(cat /proc/sys/kernel/hostname | grep 1) ]
then
  transmitter
else
  receiver
fi
read -p "Done, press any key to start over..."
clear
done
EOF
chmod +x /home/vagrant/entrypoint.sh
echo "~/entrypoint.sh && rm -f /vagrant/$(cat /proc/sys/kernel/hostname).ip && exit" >> /home/vagrant/.bashrc
echo "$(ip a s eth1 | awk '/inet / {print $2}' | sed 's/addr://')" > /vagrant/$(cat /proc/sys/kernel/hostname).ip
SCRIPT

ENV['VAGRANT_NO_PARALLEL'] = 'yes'
Vagrant.configure("2") do |config|
  config.vm.provider "libvirt"

  (1..2).each do |i|
    config.vm.define "netmask#{i}" do |worker|
      worker.vm.box = $VMIMAGE
      worker.vm.hostname = "netmask#{i}"
      worker.vm.synced_folder ".", "/vagrant", type: "nfs", nfs_udp: false
      worker.vm.provider "libvirt" do |v1|
        v1.memory = "#{$VMMEM}"
        v1.cpus = "#{$VMCPU}"
      end
      config.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--memory", "#{$VMMEM}"]
        v.customize ["modifyvm", :id, "--cpus", "#{$VMCPU}"]
      end
      worker.vm.network "private_network",
        ip: "192.168.58.6#{i}"

      worker.vm.provision :shell,
        inline: "DEBIAN_FRONTEND=noninteractive apt-get update && apt install -y iperf3" 
      worker.vm.provision :shell,
        inline: "echo 'set bell-style none' >> /etc/inputrc \
          && echo 'set visualbell' >> /home/vagrant/.vimrc"
      worker.vm.provision :shell, inline: $install
    end
  end
end
